getwd()
winedata <- read.csv("data/WineKMC.csv")
winedata[,1:9]
winedata[is.na(winedata)] <- 0
winedata[,1:9]
winedata[1:10,8:17]
install.packages("skmeans",dependencies = TRUE)
library(skmeans)
?skmeans
winedata.transposed <- t(winedata[,8:107])
winedata.transposed
winedata.transposed[1:10,1:10]
winedata.clusters <- skmeans(x = winedata.transposed,k = 5, method = "genetic")
winedata.clusters
str(winedata.clusters)
winedata.clusters$cluster[4]
winedata.clusters$cluster[which(row.names(winedata.transposed)=="Wright")]
winedata.clusters$cluster[which(row.names(winedata.transposed)=="Adams")]
?write.csv
aggregate(winedata.transposed,by = list(winedata.clusters$cluster),sum)
winedata.clustercounts <- t(aggregate(winedata.transposed,by=list(winedata.clusters$cluster),sum)[,2:33])
winedata.clustercounts
winedata.desc.plus.counts <- cbind(winedata[,1:7],winedata.clustercounts)
winedata.desc.plus.counts
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,8]),]
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,9]),]
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,8]),]
install.packages("skmeans", dependencies = TRUE);
library(skmeans);
winedata <- read.csv("data/WineKMC.csv"); # Read in the deals matrix
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE);
library(skmeans);
winedata <- read.csv("data/WineKMC.csv"); # Read in the deals matrix
install.packages("skmeans", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE);
library(skmeans);
winedata <- read.csv("data/WineKMC.csv"); # Read in the deals matrix
install.packages("skmeans", dependencies = TRUE)
View(winedata)
# Install and import the K-means library
install.packages("skmeans", dependencies = TRUE);
library(skmeans);
# Read in the deals matrix & Convert all NA fields to 0s
winedata <- read.csv("data/WineKMC.csv");
winedata[is.na(winedata)] <- 0;
winedata.transposed <- t(winedata[,8:107]; # Grab just the deals data
install.packages("skmeans", dependencies = TRUE)
# Install and import the K-means library
install.packages("skmeans", dependencies = TRUE);
library(skmeans);
# Read in the deals matrix & Convert all NA fields to 0s
winedata <- read.csv("data/WineKMC.csv");
winedata[is.na(winedata)] <- 0;
winedata.transposed <- t(winedata[,8:107]); # Grab just the deals data
winedata.transposed[1:10,1:10];
install.packages("skmeans", dependencies = TRUE)
winedata.clusters <- skmeans(winedata.transposed,k=5,method="genetic");
View(winedata.clusters)
winedata.clusters <- skmeans(winedata.transposed,k=5,method="genetic");
winedata.clustercounts <- t(aggregate(winedata.transposed,by=list(winedata.clusters$cluster),sum)[,2:33]);
winedata.desc.plus.counts <- cbind(winedata[,1:7],winedata.clustercounts);
winedata.clusters <- skmeans(winedata.transposed,k=5,method="genetic");
winedata.clustercounts <- t(aggregate(winedata.transposed,by=list(winedata.clusters$cluster),sum)[,2:33]);
winedata.desc.plus.counts <- cbind(winedata[,1:7],winedata.clustercounts);
winedata.desc.plus.counts;
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,8]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,8]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,9]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,10]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,11]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,12]),];
# Hardcode the US repo for CRAN
r <-getOption("repos");
r["CRAN"] <- "http://cran.us.r-project.org";
options(repos = r);
rm(r);
# Install and import the K-means library
install.packages("skmeans", dependencies = TRUE);
library(skmeans);
# Read in the deals matrix & Convert all NA fields to 0s
winedata <- read.csv("data/WineKMC.csv");
winedata[is.na(winedata)] <- 0;
winedata.transposed <- t(winedata[,8:107]); # Grab just the deals data
winedata.transposed[1:10,1:10];
install.packages("skmeans", dependencies = TRUE)
winedata.clusters <- skmeans(winedata.transposed,k=5,method="genetic");
winedata.clustercounts <- t(aggregate(winedata.transposed,by=list(winedata.clusters$cluster),sum)[,2:33]);
winedata.desc.plus.counts <- cbind(winedata[,1:7],winedata.clustercounts);
winedata.desc.plus.counts;
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,8]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,9]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,10]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,11]),];
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,12]),];
PregnancyData <- read.csv("data/Pregnancy.csv")
PregnancyData.Test <- read.csv("data/Pregnancy_Test.csv")
str(PregnancyData)
PregnancyData$Implied.Gender <- factor(PregnancyData$Implied.Gender)
PregnancyData$Home.Apt..PO.Box <- factor(PregnancyData$Home.Apt..PO.Box)
PregnancyData$PREGNANT <- factor(PregnancyData$PREGNANT)
str(PregnancyData)
summary(PregnancyData)
PregnancyData.Test$Implied.Gender <- factor(PregnancyData.Test$Implied.Gender)
PregnancyData.Test$Home.Apt..PO.Box <- factor(PregnancyData.Test$Home.Apt..PO.Box)
PregnancyData.Test$PREGNANT <- factor(PregnancyData.Test$PREGNANT)
summary(PregnancyData.Test)
install.packages("randomForest", dependencies = TRUE);
install.packages("ROCR", dependencies = TRUE);
library(randomForest);
library(ROCR);
Pregnancy.lm <- glm(PREGNANT ~ .,data = PregnancyData,family = binomial("logit"))
summary(Pregnancy.lm);
Pregnancy.rf <- randomForest(PREGNANT ~ .,data = PregnancyData, importance = TRUE);
varImpPlot(Pregnancy.rf, type = 2);
Pregnancy.lm.Preds <- predict(Pregnancy.lm, PregnancyData.Test, type = "response");
Pregnancy.rf.Preds <- predict(Pregnancy.rf, PregnancyData.Test, type = "prob");
summary(Pregnancy.lm.Preds);
PregnancyData.Test.lm.Preds <- predict(Pregnancy.lm, PregnancyData.Test, type = "response");
PregnancyData.Test.rf.Preds <- predict(Pregnancy.rf, PregnancyData.Test, type = "prob");
summary(PregnancyData.Test.lm.Preds);
summary(PregnancyData.Test.rf.Preds);
t(PregnancyData.Test[1,]);
t(PregnancyData.Test.lm.Preds[1,]);
t(PregnancyData.Test.lm.Preds[1]);
t(PregnancyData.Test.rf.Preds[1]);
t(PregnancyData.Test.rf.Preds[1,2]);
pred.lm <- prediction(PregnancyData.Test.lm.Preds, PregnancyData.Test$PREGNANT);
pred.rf <- prediction(PregnancyData.Test.rf.Preds[,2], PregnancyData.Test$PREGNANT);
perf.lm <- performance(pred.lm, "tpr", "fpr")
perf.rf <- performance(pred.rf, "tpr", "fpr")
plot(perf.lm, xlim=c(0,1),ylim=c(0,1));
plot(perf.rf, xlim=c(0,1),ylim=c(0,1),lty=2,add=TRUE);
PregnancyData <- read.csv("data/Pregnancy.csv");
PregnancyData.Test <- read.csv("data/Pregnancy_Test.csv");
View(PregnancyData)
PregnancyData <- read.csv("data/Pregnancy.csv");
PregnancyData.Test <- read.csv("data/Pregnancy_Test.csv");
str(PregnancyData);
# Hardcode the US repo for CRAN
r <-getOption("repos");
r["CRAN"] <- "http://cran.us.r-project.org";
options(repos = r);
rm(r);
# Install & Import required libraries
install.packages("randomForest", dependencies = TRUE);
install.packages("ROCR", dependencies = TRUE);
library(randomForest);
library(ROCR);
# Read in the Pregnancy Data
PregnancyData <- read.csv("data/Pregnancy.csv");
PregnancyData.Test <- read.csv("data/Pregnancy_Test.csv");
str(PregnancyData);
# Correctly Interpret Categorical fields as such
PregnancyData$Implied.Gender <- factor(PregnancyData$Implied.Gender);
PregnancyData$Home.Apt..PO.Box <- factor(PregnancyData$Home.Apt..PO.Box);
PregnancyData$PREGNANT <- factor(PregnancyData$PREGNANT);
PregnancyData.Test$Implied.Gender <- factor(PregnancyData.Test$Implied.Gender);
PregnancyData.Test$Home.Apt..PO.Box <- factor(PregnancyData.Test$Home.Apt..PO.Box);
PregnancyData.Test$PREGNANT <- factor(PregnancyData.Test$PREGNANT);
str(PregnancyData);
install.packages("ROCR", dependencies = TRUE)
# Hardcode the US repo for CRAN
r <-getOption("repos");
r["CRAN"] <- "http://cran.us.r-project.org";
options(repos = r);
rm(r);
# Hardcode the US repo for CRAN
r <-getOption("repos");
r["CRAN"] <- "http://cran.us.r-project.org";
options(repos = r);
rm(r);
install.packages("randomForest", dependencies = TRUE);
install.packages("ROCR", dependencies = TRUE);
library(randomForest);
library(ROCR);
install.packages("randomForest", dependencies = TRUE);
install.packages("ROCR", dependencies = TRUE);
library(randomForest);
library(ROCR);
install.packages("randomForest", dependencies = TRUE)
# Hardcode the US repo for CRAN
r <-getOption("repos");
r["CRAN"] <- "http://cran.us.r-project.org";
options(repos = r);
rm(r);
install.packages("randomForest", dependencies = TRUE);
install.packages("ROCR", dependencies = TRUE);
library(randomForest);
library(ROCR);
# Read in the Pregnancy Data
PregnancyData <- read.csv("data/Pregnancy.csv");
PregnancyData.Test <- read.csv("data/Pregnancy_Test.csv");
str(PregnancyData); # Data check
# Correctly Interpret Categorical fields as such
PregnancyData$Implied.Gender <- factor(PregnancyData$Implied.Gender);
PregnancyData$Home.Apt..PO.Box <- factor(PregnancyData$Home.Apt..PO.Box);
PregnancyData$PREGNANT <- factor(PregnancyData$PREGNANT);
PregnancyData.Test$Implied.Gender <- factor(PregnancyData.Test$Implied.Gender);
PregnancyData.Test$Home.Apt..PO.Box <- factor(PregnancyData.Test$Home.Apt..PO.Box);
PregnancyData.Test$PREGNANT <- factor(PregnancyData.Test$PREGNANT);
summary(PregnancyData.Test); # Data check
# Read in the Pregnancy Data
PregnancyData <- read.csv("data/Pregnancy.csv");
PregnancyData.Test <- read.csv("data/Pregnancy_Test.csv");
str(PregnancyData); # Data check
# Correctly Interpret Categorical fields as such
PregnancyData$Implied.Gender <- factor(PregnancyData$Implied.Gender);
PregnancyData$Home.Apt..PO.Box <- factor(PregnancyData$Home.Apt..PO.Box);
PregnancyData$PREGNANT <- factor(PregnancyData$PREGNANT);
PregnancyData.Test$Implied.Gender <- factor(PregnancyData.Test$Implied.Gender);
PregnancyData.Test$Home.Apt..PO.Box <- factor(PregnancyData.Test$Home.Apt..PO.Box);
PregnancyData.Test$PREGNANT <- factor(PregnancyData.Test$PREGNANT);
str(PregnancyData.Test); # Data check
# General Linear Model
Pregnancy.lm <- glm(PREGNANT ~ ., data = PregnancyData, family = binomial("logit"));
# Ensemble / Random Forest Model
Pregnancy.rf <- randomForest(PREGNANT ~ ., data = PregnancyData, importance = TRUE);
summary(Pregnancy.lm); # Check Model
## Predictions on Test Data using Random Forest Model
PregnancyData.Test.rf.Preds <- predict(Pregnancy.rf, PregnancyData.Test, type = "prob");
## Predictions on Test Data using Linear Regression Model
PregnancyData.Test.lm.Preds <- predict(Pregnancy.lm, PregnancyData.Test, type = "response")
varImpPlot(Pregnancy.rf, type = 2);
?varImpPlot
View(Pregnancy.rf)
# Linear Regression Model's Predictions
pred.lm <- prediction(PregnancyData.Test.lm.Preds, PregnancyData.Test$PREGNANT);
# Random Forest's Predictions
pred.rf <- prediction(PregnancyData.Test.rf.Preds[,2], PregnancyData.Test$PREGNANT);
# Measuring Performance via True Positive Rate (tpr) and False Positive Rate (fpr);
perf.lm <- performance(pred.lm, "tpr", "fpr");
perf.rf <- performance(pred.rf, "tpr", "fpr");
## Plotting Performance
plot(perf.lm, xlim=c(0,1), ylim=c(0,1));
plot(perf.rf, xlim=c(0,1), ylim=c(0,1), lty=2, add=TRUE)
install.packages("forecast", dependencies = TRUE);
install.packages("forecast", dependencies = TRUE);
library(forecast);
# Hardcode the US repo for CRAN
r <-getOption("repos");
r["CRAN"] <- "http://cran.us.r-project.org";
options(repos = r);
rm(r);
sword <- read.csv("data/SwordDemand.csv");
sword;
sword <- read.csv("data/SwordDemand.csv");
sword.ts <- ts(sword, frequency = 12, start = c(2010, 1));
sword.ts
sword <- read.csv("data/SwordDemand.csv");
# Convert to Time Series Data
sword.ts <- ts(sword, frequency = 12, start = c(2010, 1));
# Plot Time Series Data
plot(sword.ts);
sword.forecast <- forecast(sword.ts);
sword.ts; sword.forecast;
View(sword)
View(sword.forecast)
sword <- read.csv("data/SwordDemand.csv");
# Convert to Time Series Data
sword.ts <- ts(sword, frequency = 12, start = c(2010, 1));
# Plot Time Series Data
plot(sword.ts);
sword.forecast <- forecast(sword.ts);
sword.forecast <- forecast(sword.ts);
plot(sword.forecast);
sword.forecast <- forecast(sword.ts);
plot(sword.forecast);
PregnancyDuration <- read.csv("data/PregnancyDuration.csv");
View(PregnancyDuration)
summary(PregnancyDuration);
PregnancyDuration.IQR <- IQR(PregnancyDuration$GestationDays);
LowerInnerFence <- 260 - 1.5*PregnancyDuration.IQR;
UpperInnerFence <- 272 + 1.5*PregnancyDuration.IQR;
which(PregnancyDuration$GestationDays > UpperInnerFence);
PregnancyDuration$GestationDays[which(PregnancyDuration$GestationDays > UpperInnerFence)];
boxplot(PregnancyDuration$GestationDays);
boxplot(PregnancyDuration$GestationDays, range = 3);
boxplot(PregnancyDuration$GestationDays, range = 3)$stats
boxplot(PregnancyDuration$GestationDays, range = 3)$out
PregnancyDuration <- read.csv("data/PregnancyDuration.csv");
summary(PregnancyDuration); # Check Data
PregnancyDuration <- read.csv("data/PregnancyDuration.csv");
summary(PregnancyDuration); # Check Data
## Calculate the InterQuartile range (IQR)
PregnancyDuration.IQR <- IQR(PregnancyDuration$GestationDays);
## Calculate the Lower & Upper Tukey Fences
PregnancyDuration.LowerInnerFence <- 260 - 1.5*PregnancyDuration.IQR;
PregnancyDuration.UpperInnerFence <- 272 + 1.5*PregnancyDuration.IQR;
PregnancyDuration <- read.csv("data/PregnancyDuration.csv");
summary(PregnancyDuration); # Check Data
## Calculate the InterQuartile range (IQR)
PregnancyDuration.IQR <- IQR(PregnancyDuration$GestationDays);
## Calculate the Lower & Upper Tukey Fences
PregnancyDuration.LowerInnerFence <- 260 - 1.5*PregnancyDuration.IQR;
PregnancyDuration.UpperInnerFence <- 272 + 1.5*PregnancyDuration.IQR;
OutlierIndexes <- which(PregnancyDuration$GestationDays > PregnancyDuration.UpperInnerFence);
OutlierIndexes <- which(PregnancyDuration$GestationDays > PregnancyDuration.UpperInnerFence);
OutlierValues <- PregnancyDuration$GestationDays[OutlierIndexes];
OutlierValues;
boxplot(PregnancyDuration$GestationDays);
boxplot(PregnancyDuration$GestationDays);
boxplot(PregnancyDuration$GestationDays); # Uses the Inner Fences
boxplot(PregnancyDuration$GestationDays, range = 3) # Uses Outer Fences
boxplot(PregnancyDuration$GestationDays); # Uses the Inner Fences
boxplot(PregnancyDuration$GestationDays, range = 3) # Uses Outer Fences
# Tukey Fences & All
boxplot(PregnancyDuration$GestationDays, range = 3)$stats;
# Outliers based on the Outer Fence
boxplot(PregnancyDuration$GestationDays, range = 3)$out;
install.packages("DMwR", dependencies = TRUE);
library(DMwR);
install.packages("DMwR", dependencies = TRUE);
CallCenter <- read.csv("data/CallCenter.csv");
summary(CallCenter); # Check Data
## Scale & Center the Data
CallCenter.scale <- scale(CallCenter[2:11]);
summary(CallCenter.scale);
install.packages("DMwR", dependencies = TRUE);
library(DMwR)
install.packages("DMwR", dependencies = TRUE);
library(DMwR)
install.packages("DMwR2", dependencies = TRUE);
library(DMwR2)
CallCenter <- read.csv("data/CallCenter.csv");
summary(CallCenter); # Check Data
## Scale & Center the Data
CallCenter.scale <- scale(CallCenter[2:11]);
summary(CallCenter.scale);
CallCenter.lof <- lofactor(CallCenter.scale, 5);
which(CallCenter.lof > 1.5); # Outlier Indexes
CallCenter[which(CallCenter.lof > 1.5)]; # Outliers
CallCenter.lof <- lofactor(CallCenter.scale, 5);
which(CallCenter.lof > 1.5); # Outlier Indexes
CallCenter[which(CallCenter.lof > 1.5),]; # Outliers
CallCenter.lof <- lofactor(CallCenter.scale, 5); # K Nearest Neighbours where K = 5 (Local Outlier Factor)
which(CallCenter.lof > 1.5); # Outlier Indexes
CallCenter[which(CallCenter.lof > 1.5),]; # Outliers
?lofactor
